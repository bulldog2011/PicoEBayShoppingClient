// Generated by xsd compiler for ios/objective-c
// DO NOT CHANGE!

#import <Foundation/Foundation.h>
#import "PicoClassSchema.h"
#import "PicoPropertySchema.h"
#import "PicoConstants.h"
#import "PicoBindable.h"



/**
 
 Contains an ISBN value, EAN value, UPC value, ticket keywords, or eBay
 catalog product ID, plus other meta-data. For event tickets, this type
 can contain a set of keywords that uniquely identify the product. Only
 applicable to certain categories that support Pre-filled Item
 Information.
 
 
 @ingroup ShoppingInterface
*/
@interface Shopping_ExternalProductIDType : NSObject <PicoBindable> {

@private
    NSString *_value;
    NSNumber *_returnSearchResultOnDuplicates;
    NSString *_type;
    NSMutableArray *_alternateValue;
    NSMutableArray *_any;

}


/**
 
 An industry-standard value that uniquely identifies the product. The
 valid values are dictated by the Type property.
 Required if Type is specified.
 Max length 13 for ISBN, 13 for EAN,
 12 for UPC, and 4000 for ProductID. No max length for ticket keywords
 (but passing too much data can result in "no match found"
 errors).<br>
 <br>
 <b>For AddItem and related calls:</b>
 If the primary and secondary categories are both catalog-enabled,
 the value must apply to the primary category.
 Event tickets listings support a set of keywords
 that uniquely identify the listing. The ticket keywords specify the
 event name (the title shown on the ticket), venue name, and event
 date and time. See the eBay Web Services guide for more information
 and validation rules. For convenience, you can pass an eBay product ID
 as input (not limited to media categories).<br>
 <br>
 Required for Half.com listing use cases, and this can only be an
 ISBN, UPC, or EAN value.<br>
 <br>
 <b>For FindProducts input only:</b>
 Only ISBN, EAN, and UPC values are currently supported as
 input.<br>
 <br>
 <b>For FindProducts and GetSellerPayments output only:</b>
 Also see AlternateValue, which is returned if the catalog defines multiple
 ISBN values (e.g., one for ISBN-13 and one for ISBN-10). Please note that
 some catalogs return ISBN values that are not 10 or 13 characters, and some
 values contain non-alphanumeric symbols (e.g., $).
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *value;

/**
 
 Applicable for listing use cases only (not buy-side searching).
 Indicates what eBay should do if more than one product matches
 the value passed in Value. Only takes effect when more than one
 match is found. If true, the response should include an error
 and all matching product IDs. If false, the response should include
 an error but should not return the matching product IDs.
 This field is also applicable when listing Half.com items.
 
 
 type : NSNumber, wrapper for primitive bool
*/
@property (nonatomic, retain) NSNumber *returnSearchResultOnDuplicates;

/**
 
 The kind of identifier being used. The choices listed are for requests, are
 are required if Value is specified. For Half.com listing use cases, only
 ISBN, UPC, and EAN are supported.<br>
 <br>
 FindProducts supports ISBN, UPC, and EAN.
 
 
 type: string constant in Shopping_ExternalProductCodeType.h
*/
@property (nonatomic, retain) NSString *type;

/**
 
 An industry-standard value that provides an alternate identification for
 the product, if any. Currently, this only returns an alternate ISBN
 value. If the catalog defines both an ISBN-13 and ISBN-10,
 then the ISBN-13 is returned in Value and the ISBN-10 is returned in
 AlternateValue. (That is, the ISBN-13 is considered to be the preferred
 identifier.) If the catalog only defines one ISBN, it is returned in
 Value (and AlternateValue is not returned). Please note that some
 catalogs return ISBN values that are not 10 or 13 characters,
 and some values contain non-alphanumeric symbols (e.g., $).
 
 
 entry type : NSString, wrapper for primitive string
*/

@property (nonatomic, retain) NSMutableArray *alternateValue;

/**
 (public property)
 
 entry type : PicoAnyElement, wrapper for primitive anyelement
*/

@property (nonatomic, retain) NSMutableArray *any;


@end
